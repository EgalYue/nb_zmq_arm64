// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ninebot_zmq/pose.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2fpose_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2fpose_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ninebot_zmq/sensor_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ninebot_5fzmq_2fpose_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ninebot_5fzmq_2fpose_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ninebot_5fzmq_2fpose_2eproto;
namespace Segway_proto {
class Point2Dd;
class Point2DdDefaultTypeInternal;
extern Point2DdDefaultTypeInternal _Point2Dd_default_instance_;
class Point2Df;
class Point2DfDefaultTypeInternal;
extern Point2DfDefaultTypeInternal _Point2Df_default_instance_;
class Point3Dd;
class Point3DdDefaultTypeInternal;
extern Point3DdDefaultTypeInternal _Point3Dd_default_instance_;
class Point3Df;
class Point3DfDefaultTypeInternal;
extern Point3DfDefaultTypeInternal _Point3Df_default_instance_;
class Pose2Dd;
class Pose2DdDefaultTypeInternal;
extern Pose2DdDefaultTypeInternal _Pose2Dd_default_instance_;
class Pose2Df;
class Pose2DfDefaultTypeInternal;
extern Pose2DfDefaultTypeInternal _Pose2Df_default_instance_;
class Pose3Dd;
class Pose3DdDefaultTypeInternal;
extern Pose3DdDefaultTypeInternal _Pose3Dd_default_instance_;
class Pose3Df;
class Pose3DfDefaultTypeInternal;
extern Pose3DfDefaultTypeInternal _Pose3Df_default_instance_;
class Quaternion_d;
class Quaternion_dDefaultTypeInternal;
extern Quaternion_dDefaultTypeInternal _Quaternion_d_default_instance_;
class Quaternion_f;
class Quaternion_fDefaultTypeInternal;
extern Quaternion_fDefaultTypeInternal _Quaternion_f_default_instance_;
class StampedPose2Dd;
class StampedPose2DdDefaultTypeInternal;
extern StampedPose2DdDefaultTypeInternal _StampedPose2Dd_default_instance_;
class StampedPose2Df;
class StampedPose2DfDefaultTypeInternal;
extern StampedPose2DfDefaultTypeInternal _StampedPose2Df_default_instance_;
class StampedPose3Dd;
class StampedPose3DdDefaultTypeInternal;
extern StampedPose3DdDefaultTypeInternal _StampedPose3Dd_default_instance_;
class StampedPose3Df;
class StampedPose3DfDefaultTypeInternal;
extern StampedPose3DfDefaultTypeInternal _StampedPose3Df_default_instance_;
}  // namespace Segway_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Segway_proto::Point2Dd* Arena::CreateMaybeMessage<::Segway_proto::Point2Dd>(Arena*);
template<> ::Segway_proto::Point2Df* Arena::CreateMaybeMessage<::Segway_proto::Point2Df>(Arena*);
template<> ::Segway_proto::Point3Dd* Arena::CreateMaybeMessage<::Segway_proto::Point3Dd>(Arena*);
template<> ::Segway_proto::Point3Df* Arena::CreateMaybeMessage<::Segway_proto::Point3Df>(Arena*);
template<> ::Segway_proto::Pose2Dd* Arena::CreateMaybeMessage<::Segway_proto::Pose2Dd>(Arena*);
template<> ::Segway_proto::Pose2Df* Arena::CreateMaybeMessage<::Segway_proto::Pose2Df>(Arena*);
template<> ::Segway_proto::Pose3Dd* Arena::CreateMaybeMessage<::Segway_proto::Pose3Dd>(Arena*);
template<> ::Segway_proto::Pose3Df* Arena::CreateMaybeMessage<::Segway_proto::Pose3Df>(Arena*);
template<> ::Segway_proto::Quaternion_d* Arena::CreateMaybeMessage<::Segway_proto::Quaternion_d>(Arena*);
template<> ::Segway_proto::Quaternion_f* Arena::CreateMaybeMessage<::Segway_proto::Quaternion_f>(Arena*);
template<> ::Segway_proto::StampedPose2Dd* Arena::CreateMaybeMessage<::Segway_proto::StampedPose2Dd>(Arena*);
template<> ::Segway_proto::StampedPose2Df* Arena::CreateMaybeMessage<::Segway_proto::StampedPose2Df>(Arena*);
template<> ::Segway_proto::StampedPose3Dd* Arena::CreateMaybeMessage<::Segway_proto::StampedPose3Dd>(Arena*);
template<> ::Segway_proto::StampedPose3Df* Arena::CreateMaybeMessage<::Segway_proto::StampedPose3Df>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Segway_proto {

// ===================================================================

class Point3Dd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.Point3Dd) */ {
 public:
  Point3Dd();
  virtual ~Point3Dd();

  Point3Dd(const Point3Dd& from);
  Point3Dd(Point3Dd&& from) noexcept
    : Point3Dd() {
    *this = ::std::move(from);
  }

  inline Point3Dd& operator=(const Point3Dd& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3Dd& operator=(Point3Dd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3Dd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3Dd* internal_default_instance() {
    return reinterpret_cast<const Point3Dd*>(
               &_Point3Dd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Point3Dd* other);
  friend void swap(Point3Dd& a, Point3Dd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point3Dd* New() const final {
    return CreateMaybeMessage<Point3Dd>(nullptr);
  }

  Point3Dd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3Dd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3Dd& from);
  void MergeFrom(const Point3Dd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3Dd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.Point3Dd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:Segway_proto.Point3Dd)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class Point2Dd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.Point2Dd) */ {
 public:
  Point2Dd();
  virtual ~Point2Dd();

  Point2Dd(const Point2Dd& from);
  Point2Dd(Point2Dd&& from) noexcept
    : Point2Dd() {
    *this = ::std::move(from);
  }

  inline Point2Dd& operator=(const Point2Dd& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2Dd& operator=(Point2Dd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2Dd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2Dd* internal_default_instance() {
    return reinterpret_cast<const Point2Dd*>(
               &_Point2Dd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Point2Dd* other);
  friend void swap(Point2Dd& a, Point2Dd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point2Dd* New() const final {
    return CreateMaybeMessage<Point2Dd>(nullptr);
  }

  Point2Dd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2Dd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2Dd& from);
  void MergeFrom(const Point2Dd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2Dd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.Point2Dd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:Segway_proto.Point2Dd)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class Point3Df :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.Point3Df) */ {
 public:
  Point3Df();
  virtual ~Point3Df();

  Point3Df(const Point3Df& from);
  Point3Df(Point3Df&& from) noexcept
    : Point3Df() {
    *this = ::std::move(from);
  }

  inline Point3Df& operator=(const Point3Df& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3Df& operator=(Point3Df&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3Df& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3Df* internal_default_instance() {
    return reinterpret_cast<const Point3Df*>(
               &_Point3Df_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Point3Df* other);
  friend void swap(Point3Df& a, Point3Df& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point3Df* New() const final {
    return CreateMaybeMessage<Point3Df>(nullptr);
  }

  Point3Df* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3Df>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3Df& from);
  void MergeFrom(const Point3Df& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3Df* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.Point3Df";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:Segway_proto.Point3Df)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class Point2Df :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.Point2Df) */ {
 public:
  Point2Df();
  virtual ~Point2Df();

  Point2Df(const Point2Df& from);
  Point2Df(Point2Df&& from) noexcept
    : Point2Df() {
    *this = ::std::move(from);
  }

  inline Point2Df& operator=(const Point2Df& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2Df& operator=(Point2Df&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2Df& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2Df* internal_default_instance() {
    return reinterpret_cast<const Point2Df*>(
               &_Point2Df_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Point2Df* other);
  friend void swap(Point2Df& a, Point2Df& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point2Df* New() const final {
    return CreateMaybeMessage<Point2Df>(nullptr);
  }

  Point2Df* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2Df>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2Df& from);
  void MergeFrom(const Point2Df& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2Df* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.Point2Df";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:Segway_proto.Point2Df)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class Quaternion_d :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.Quaternion_d) */ {
 public:
  Quaternion_d();
  virtual ~Quaternion_d();

  Quaternion_d(const Quaternion_d& from);
  Quaternion_d(Quaternion_d&& from) noexcept
    : Quaternion_d() {
    *this = ::std::move(from);
  }

  inline Quaternion_d& operator=(const Quaternion_d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion_d& operator=(Quaternion_d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion_d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion_d* internal_default_instance() {
    return reinterpret_cast<const Quaternion_d*>(
               &_Quaternion_d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Quaternion_d* other);
  friend void swap(Quaternion_d& a, Quaternion_d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Quaternion_d* New() const final {
    return CreateMaybeMessage<Quaternion_d>(nullptr);
  }

  Quaternion_d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion_d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion_d& from);
  void MergeFrom(const Quaternion_d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion_d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.Quaternion_d";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // double w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  double w() const;
  void set_w(double value);

  // @@protoc_insertion_point(class_scope:Segway_proto.Quaternion_d)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class Quaternion_f :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.Quaternion_f) */ {
 public:
  Quaternion_f();
  virtual ~Quaternion_f();

  Quaternion_f(const Quaternion_f& from);
  Quaternion_f(Quaternion_f&& from) noexcept
    : Quaternion_f() {
    *this = ::std::move(from);
  }

  inline Quaternion_f& operator=(const Quaternion_f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion_f& operator=(Quaternion_f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion_f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion_f* internal_default_instance() {
    return reinterpret_cast<const Quaternion_f*>(
               &_Quaternion_f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Quaternion_f* other);
  friend void swap(Quaternion_f& a, Quaternion_f& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Quaternion_f* New() const final {
    return CreateMaybeMessage<Quaternion_f>(nullptr);
  }

  Quaternion_f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion_f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion_f& from);
  void MergeFrom(const Quaternion_f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion_f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.Quaternion_f";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // float w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  float w() const;
  void set_w(float value);

  // @@protoc_insertion_point(class_scope:Segway_proto.Quaternion_f)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class Pose3Dd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.Pose3Dd) */ {
 public:
  Pose3Dd();
  virtual ~Pose3Dd();

  Pose3Dd(const Pose3Dd& from);
  Pose3Dd(Pose3Dd&& from) noexcept
    : Pose3Dd() {
    *this = ::std::move(from);
  }

  inline Pose3Dd& operator=(const Pose3Dd& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose3Dd& operator=(Pose3Dd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose3Dd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose3Dd* internal_default_instance() {
    return reinterpret_cast<const Pose3Dd*>(
               &_Pose3Dd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Pose3Dd* other);
  friend void swap(Pose3Dd& a, Pose3Dd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose3Dd* New() const final {
    return CreateMaybeMessage<Pose3Dd>(nullptr);
  }

  Pose3Dd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose3Dd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose3Dd& from);
  void MergeFrom(const Pose3Dd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose3Dd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.Pose3Dd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Point3Dd p_xyz = 1;
  bool has_p_xyz() const;
  void clear_p_xyz();
  static const int kPXyzFieldNumber = 1;
  const ::Segway_proto::Point3Dd& p_xyz() const;
  ::Segway_proto::Point3Dd* release_p_xyz();
  ::Segway_proto::Point3Dd* mutable_p_xyz();
  void set_allocated_p_xyz(::Segway_proto::Point3Dd* p_xyz);

  // .Segway_proto.Quaternion_d q_xyzw = 2;
  bool has_q_xyzw() const;
  void clear_q_xyzw();
  static const int kQXyzwFieldNumber = 2;
  const ::Segway_proto::Quaternion_d& q_xyzw() const;
  ::Segway_proto::Quaternion_d* release_q_xyzw();
  ::Segway_proto::Quaternion_d* mutable_q_xyzw();
  void set_allocated_q_xyzw(::Segway_proto::Quaternion_d* q_xyzw);

  // @@protoc_insertion_point(class_scope:Segway_proto.Pose3Dd)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Point3Dd* p_xyz_;
  ::Segway_proto::Quaternion_d* q_xyzw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class Pose3Df :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.Pose3Df) */ {
 public:
  Pose3Df();
  virtual ~Pose3Df();

  Pose3Df(const Pose3Df& from);
  Pose3Df(Pose3Df&& from) noexcept
    : Pose3Df() {
    *this = ::std::move(from);
  }

  inline Pose3Df& operator=(const Pose3Df& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose3Df& operator=(Pose3Df&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose3Df& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose3Df* internal_default_instance() {
    return reinterpret_cast<const Pose3Df*>(
               &_Pose3Df_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Pose3Df* other);
  friend void swap(Pose3Df& a, Pose3Df& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose3Df* New() const final {
    return CreateMaybeMessage<Pose3Df>(nullptr);
  }

  Pose3Df* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose3Df>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose3Df& from);
  void MergeFrom(const Pose3Df& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose3Df* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.Pose3Df";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Point3Df p_xyz = 1;
  bool has_p_xyz() const;
  void clear_p_xyz();
  static const int kPXyzFieldNumber = 1;
  const ::Segway_proto::Point3Df& p_xyz() const;
  ::Segway_proto::Point3Df* release_p_xyz();
  ::Segway_proto::Point3Df* mutable_p_xyz();
  void set_allocated_p_xyz(::Segway_proto::Point3Df* p_xyz);

  // .Segway_proto.Quaternion_f q_xyzw = 2;
  bool has_q_xyzw() const;
  void clear_q_xyzw();
  static const int kQXyzwFieldNumber = 2;
  const ::Segway_proto::Quaternion_f& q_xyzw() const;
  ::Segway_proto::Quaternion_f* release_q_xyzw();
  ::Segway_proto::Quaternion_f* mutable_q_xyzw();
  void set_allocated_q_xyzw(::Segway_proto::Quaternion_f* q_xyzw);

  // @@protoc_insertion_point(class_scope:Segway_proto.Pose3Df)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Point3Df* p_xyz_;
  ::Segway_proto::Quaternion_f* q_xyzw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class Pose2Dd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.Pose2Dd) */ {
 public:
  Pose2Dd();
  virtual ~Pose2Dd();

  Pose2Dd(const Pose2Dd& from);
  Pose2Dd(Pose2Dd&& from) noexcept
    : Pose2Dd() {
    *this = ::std::move(from);
  }

  inline Pose2Dd& operator=(const Pose2Dd& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose2Dd& operator=(Pose2Dd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose2Dd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose2Dd* internal_default_instance() {
    return reinterpret_cast<const Pose2Dd*>(
               &_Pose2Dd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Pose2Dd* other);
  friend void swap(Pose2Dd& a, Pose2Dd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose2Dd* New() const final {
    return CreateMaybeMessage<Pose2Dd>(nullptr);
  }

  Pose2Dd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose2Dd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose2Dd& from);
  void MergeFrom(const Pose2Dd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose2Dd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.Pose2Dd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Point2Dd p_xy = 1;
  bool has_p_xy() const;
  void clear_p_xy();
  static const int kPXyFieldNumber = 1;
  const ::Segway_proto::Point2Dd& p_xy() const;
  ::Segway_proto::Point2Dd* release_p_xy();
  ::Segway_proto::Point2Dd* mutable_p_xy();
  void set_allocated_p_xy(::Segway_proto::Point2Dd* p_xy);

  // double orientation = 2;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  double orientation() const;
  void set_orientation(double value);

  // @@protoc_insertion_point(class_scope:Segway_proto.Pose2Dd)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Point2Dd* p_xy_;
  double orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class Pose2Df :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.Pose2Df) */ {
 public:
  Pose2Df();
  virtual ~Pose2Df();

  Pose2Df(const Pose2Df& from);
  Pose2Df(Pose2Df&& from) noexcept
    : Pose2Df() {
    *this = ::std::move(from);
  }

  inline Pose2Df& operator=(const Pose2Df& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose2Df& operator=(Pose2Df&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose2Df& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose2Df* internal_default_instance() {
    return reinterpret_cast<const Pose2Df*>(
               &_Pose2Df_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Pose2Df* other);
  friend void swap(Pose2Df& a, Pose2Df& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose2Df* New() const final {
    return CreateMaybeMessage<Pose2Df>(nullptr);
  }

  Pose2Df* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose2Df>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose2Df& from);
  void MergeFrom(const Pose2Df& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose2Df* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.Pose2Df";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Point2Df p_xy = 1;
  bool has_p_xy() const;
  void clear_p_xy();
  static const int kPXyFieldNumber = 1;
  const ::Segway_proto::Point2Df& p_xy() const;
  ::Segway_proto::Point2Df* release_p_xy();
  ::Segway_proto::Point2Df* mutable_p_xy();
  void set_allocated_p_xy(::Segway_proto::Point2Df* p_xy);

  // float orientation = 2;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  float orientation() const;
  void set_orientation(float value);

  // @@protoc_insertion_point(class_scope:Segway_proto.Pose2Df)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Point2Df* p_xy_;
  float orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class StampedPose3Dd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.StampedPose3Dd) */ {
 public:
  StampedPose3Dd();
  virtual ~StampedPose3Dd();

  StampedPose3Dd(const StampedPose3Dd& from);
  StampedPose3Dd(StampedPose3Dd&& from) noexcept
    : StampedPose3Dd() {
    *this = ::std::move(from);
  }

  inline StampedPose3Dd& operator=(const StampedPose3Dd& from) {
    CopyFrom(from);
    return *this;
  }
  inline StampedPose3Dd& operator=(StampedPose3Dd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StampedPose3Dd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StampedPose3Dd* internal_default_instance() {
    return reinterpret_cast<const StampedPose3Dd*>(
               &_StampedPose3Dd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(StampedPose3Dd* other);
  friend void swap(StampedPose3Dd& a, StampedPose3Dd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StampedPose3Dd* New() const final {
    return CreateMaybeMessage<StampedPose3Dd>(nullptr);
  }

  StampedPose3Dd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StampedPose3Dd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StampedPose3Dd& from);
  void MergeFrom(const StampedPose3Dd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StampedPose3Dd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.StampedPose3Dd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Segway_proto::Header& header() const;
  ::Segway_proto::Header* release_header();
  ::Segway_proto::Header* mutable_header();
  void set_allocated_header(::Segway_proto::Header* header);

  // .Segway_proto.Pose3Dd pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::Segway_proto::Pose3Dd& pose() const;
  ::Segway_proto::Pose3Dd* release_pose();
  ::Segway_proto::Pose3Dd* mutable_pose();
  void set_allocated_pose(::Segway_proto::Pose3Dd* pose);

  // @@protoc_insertion_point(class_scope:Segway_proto.StampedPose3Dd)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Header* header_;
  ::Segway_proto::Pose3Dd* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class StampedPose3Df :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.StampedPose3Df) */ {
 public:
  StampedPose3Df();
  virtual ~StampedPose3Df();

  StampedPose3Df(const StampedPose3Df& from);
  StampedPose3Df(StampedPose3Df&& from) noexcept
    : StampedPose3Df() {
    *this = ::std::move(from);
  }

  inline StampedPose3Df& operator=(const StampedPose3Df& from) {
    CopyFrom(from);
    return *this;
  }
  inline StampedPose3Df& operator=(StampedPose3Df&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StampedPose3Df& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StampedPose3Df* internal_default_instance() {
    return reinterpret_cast<const StampedPose3Df*>(
               &_StampedPose3Df_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(StampedPose3Df* other);
  friend void swap(StampedPose3Df& a, StampedPose3Df& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StampedPose3Df* New() const final {
    return CreateMaybeMessage<StampedPose3Df>(nullptr);
  }

  StampedPose3Df* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StampedPose3Df>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StampedPose3Df& from);
  void MergeFrom(const StampedPose3Df& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StampedPose3Df* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.StampedPose3Df";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Segway_proto::Header& header() const;
  ::Segway_proto::Header* release_header();
  ::Segway_proto::Header* mutable_header();
  void set_allocated_header(::Segway_proto::Header* header);

  // .Segway_proto.Pose3Df pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::Segway_proto::Pose3Df& pose() const;
  ::Segway_proto::Pose3Df* release_pose();
  ::Segway_proto::Pose3Df* mutable_pose();
  void set_allocated_pose(::Segway_proto::Pose3Df* pose);

  // @@protoc_insertion_point(class_scope:Segway_proto.StampedPose3Df)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Header* header_;
  ::Segway_proto::Pose3Df* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class StampedPose2Dd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.StampedPose2Dd) */ {
 public:
  StampedPose2Dd();
  virtual ~StampedPose2Dd();

  StampedPose2Dd(const StampedPose2Dd& from);
  StampedPose2Dd(StampedPose2Dd&& from) noexcept
    : StampedPose2Dd() {
    *this = ::std::move(from);
  }

  inline StampedPose2Dd& operator=(const StampedPose2Dd& from) {
    CopyFrom(from);
    return *this;
  }
  inline StampedPose2Dd& operator=(StampedPose2Dd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StampedPose2Dd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StampedPose2Dd* internal_default_instance() {
    return reinterpret_cast<const StampedPose2Dd*>(
               &_StampedPose2Dd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(StampedPose2Dd* other);
  friend void swap(StampedPose2Dd& a, StampedPose2Dd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StampedPose2Dd* New() const final {
    return CreateMaybeMessage<StampedPose2Dd>(nullptr);
  }

  StampedPose2Dd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StampedPose2Dd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StampedPose2Dd& from);
  void MergeFrom(const StampedPose2Dd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StampedPose2Dd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.StampedPose2Dd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Segway_proto::Header& header() const;
  ::Segway_proto::Header* release_header();
  ::Segway_proto::Header* mutable_header();
  void set_allocated_header(::Segway_proto::Header* header);

  // .Segway_proto.Pose2Dd pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::Segway_proto::Pose2Dd& pose() const;
  ::Segway_proto::Pose2Dd* release_pose();
  ::Segway_proto::Pose2Dd* mutable_pose();
  void set_allocated_pose(::Segway_proto::Pose2Dd* pose);

  // @@protoc_insertion_point(class_scope:Segway_proto.StampedPose2Dd)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Header* header_;
  ::Segway_proto::Pose2Dd* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// -------------------------------------------------------------------

class StampedPose2Df :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.StampedPose2Df) */ {
 public:
  StampedPose2Df();
  virtual ~StampedPose2Df();

  StampedPose2Df(const StampedPose2Df& from);
  StampedPose2Df(StampedPose2Df&& from) noexcept
    : StampedPose2Df() {
    *this = ::std::move(from);
  }

  inline StampedPose2Df& operator=(const StampedPose2Df& from) {
    CopyFrom(from);
    return *this;
  }
  inline StampedPose2Df& operator=(StampedPose2Df&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StampedPose2Df& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StampedPose2Df* internal_default_instance() {
    return reinterpret_cast<const StampedPose2Df*>(
               &_StampedPose2Df_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(StampedPose2Df* other);
  friend void swap(StampedPose2Df& a, StampedPose2Df& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StampedPose2Df* New() const final {
    return CreateMaybeMessage<StampedPose2Df>(nullptr);
  }

  StampedPose2Df* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StampedPose2Df>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StampedPose2Df& from);
  void MergeFrom(const StampedPose2Df& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StampedPose2Df* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.StampedPose2Df";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fpose_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Segway_proto::Header& header() const;
  ::Segway_proto::Header* release_header();
  ::Segway_proto::Header* mutable_header();
  void set_allocated_header(::Segway_proto::Header* header);

  // .Segway_proto.Pose2Df pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::Segway_proto::Pose2Df& pose() const;
  ::Segway_proto::Pose2Df* release_pose();
  ::Segway_proto::Pose2Df* mutable_pose();
  void set_allocated_pose(::Segway_proto::Pose2Df* pose);

  // @@protoc_insertion_point(class_scope:Segway_proto.StampedPose2Df)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Header* header_;
  ::Segway_proto::Pose2Df* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fpose_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point3Dd

// double x = 1;
inline void Point3Dd::clear_x() {
  x_ = 0;
}
inline double Point3Dd::x() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Point3Dd.x)
  return x_;
}
inline void Point3Dd::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Point3Dd.x)
}

// double y = 2;
inline void Point3Dd::clear_y() {
  y_ = 0;
}
inline double Point3Dd::y() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Point3Dd.y)
  return y_;
}
inline void Point3Dd::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Point3Dd.y)
}

// double z = 3;
inline void Point3Dd::clear_z() {
  z_ = 0;
}
inline double Point3Dd::z() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Point3Dd.z)
  return z_;
}
inline void Point3Dd::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Point3Dd.z)
}

// -------------------------------------------------------------------

// Point2Dd

// double x = 1;
inline void Point2Dd::clear_x() {
  x_ = 0;
}
inline double Point2Dd::x() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Point2Dd.x)
  return x_;
}
inline void Point2Dd::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Point2Dd.x)
}

// double y = 2;
inline void Point2Dd::clear_y() {
  y_ = 0;
}
inline double Point2Dd::y() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Point2Dd.y)
  return y_;
}
inline void Point2Dd::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Point2Dd.y)
}

// -------------------------------------------------------------------

// Point3Df

// float x = 1;
inline void Point3Df::clear_x() {
  x_ = 0;
}
inline float Point3Df::x() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Point3Df.x)
  return x_;
}
inline void Point3Df::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Point3Df.x)
}

// float y = 2;
inline void Point3Df::clear_y() {
  y_ = 0;
}
inline float Point3Df::y() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Point3Df.y)
  return y_;
}
inline void Point3Df::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Point3Df.y)
}

// float z = 3;
inline void Point3Df::clear_z() {
  z_ = 0;
}
inline float Point3Df::z() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Point3Df.z)
  return z_;
}
inline void Point3Df::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Point3Df.z)
}

// -------------------------------------------------------------------

// Point2Df

// float x = 1;
inline void Point2Df::clear_x() {
  x_ = 0;
}
inline float Point2Df::x() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Point2Df.x)
  return x_;
}
inline void Point2Df::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Point2Df.x)
}

// float y = 2;
inline void Point2Df::clear_y() {
  y_ = 0;
}
inline float Point2Df::y() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Point2Df.y)
  return y_;
}
inline void Point2Df::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Point2Df.y)
}

// -------------------------------------------------------------------

// Quaternion_d

// double x = 1;
inline void Quaternion_d::clear_x() {
  x_ = 0;
}
inline double Quaternion_d::x() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Quaternion_d.x)
  return x_;
}
inline void Quaternion_d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Quaternion_d.x)
}

// double y = 2;
inline void Quaternion_d::clear_y() {
  y_ = 0;
}
inline double Quaternion_d::y() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Quaternion_d.y)
  return y_;
}
inline void Quaternion_d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Quaternion_d.y)
}

// double z = 3;
inline void Quaternion_d::clear_z() {
  z_ = 0;
}
inline double Quaternion_d::z() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Quaternion_d.z)
  return z_;
}
inline void Quaternion_d::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Quaternion_d.z)
}

// double w = 4;
inline void Quaternion_d::clear_w() {
  w_ = 0;
}
inline double Quaternion_d::w() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Quaternion_d.w)
  return w_;
}
inline void Quaternion_d::set_w(double value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Quaternion_d.w)
}

// -------------------------------------------------------------------

// Quaternion_f

// float x = 1;
inline void Quaternion_f::clear_x() {
  x_ = 0;
}
inline float Quaternion_f::x() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Quaternion_f.x)
  return x_;
}
inline void Quaternion_f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Quaternion_f.x)
}

// float y = 2;
inline void Quaternion_f::clear_y() {
  y_ = 0;
}
inline float Quaternion_f::y() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Quaternion_f.y)
  return y_;
}
inline void Quaternion_f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Quaternion_f.y)
}

// float z = 3;
inline void Quaternion_f::clear_z() {
  z_ = 0;
}
inline float Quaternion_f::z() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Quaternion_f.z)
  return z_;
}
inline void Quaternion_f::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Quaternion_f.z)
}

// float w = 4;
inline void Quaternion_f::clear_w() {
  w_ = 0;
}
inline float Quaternion_f::w() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Quaternion_f.w)
  return w_;
}
inline void Quaternion_f::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Quaternion_f.w)
}

// -------------------------------------------------------------------

// Pose3Dd

// .Segway_proto.Point3Dd p_xyz = 1;
inline bool Pose3Dd::has_p_xyz() const {
  return this != internal_default_instance() && p_xyz_ != nullptr;
}
inline void Pose3Dd::clear_p_xyz() {
  if (GetArenaNoVirtual() == nullptr && p_xyz_ != nullptr) {
    delete p_xyz_;
  }
  p_xyz_ = nullptr;
}
inline const ::Segway_proto::Point3Dd& Pose3Dd::p_xyz() const {
  const ::Segway_proto::Point3Dd* p = p_xyz_;
  // @@protoc_insertion_point(field_get:Segway_proto.Pose3Dd.p_xyz)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Point3Dd*>(
      &::Segway_proto::_Point3Dd_default_instance_);
}
inline ::Segway_proto::Point3Dd* Pose3Dd::release_p_xyz() {
  // @@protoc_insertion_point(field_release:Segway_proto.Pose3Dd.p_xyz)
  
  ::Segway_proto::Point3Dd* temp = p_xyz_;
  p_xyz_ = nullptr;
  return temp;
}
inline ::Segway_proto::Point3Dd* Pose3Dd::mutable_p_xyz() {
  
  if (p_xyz_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Point3Dd>(GetArenaNoVirtual());
    p_xyz_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.Pose3Dd.p_xyz)
  return p_xyz_;
}
inline void Pose3Dd::set_allocated_p_xyz(::Segway_proto::Point3Dd* p_xyz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete p_xyz_;
  }
  if (p_xyz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p_xyz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p_xyz, submessage_arena);
    }
    
  } else {
    
  }
  p_xyz_ = p_xyz;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.Pose3Dd.p_xyz)
}

// .Segway_proto.Quaternion_d q_xyzw = 2;
inline bool Pose3Dd::has_q_xyzw() const {
  return this != internal_default_instance() && q_xyzw_ != nullptr;
}
inline void Pose3Dd::clear_q_xyzw() {
  if (GetArenaNoVirtual() == nullptr && q_xyzw_ != nullptr) {
    delete q_xyzw_;
  }
  q_xyzw_ = nullptr;
}
inline const ::Segway_proto::Quaternion_d& Pose3Dd::q_xyzw() const {
  const ::Segway_proto::Quaternion_d* p = q_xyzw_;
  // @@protoc_insertion_point(field_get:Segway_proto.Pose3Dd.q_xyzw)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Quaternion_d*>(
      &::Segway_proto::_Quaternion_d_default_instance_);
}
inline ::Segway_proto::Quaternion_d* Pose3Dd::release_q_xyzw() {
  // @@protoc_insertion_point(field_release:Segway_proto.Pose3Dd.q_xyzw)
  
  ::Segway_proto::Quaternion_d* temp = q_xyzw_;
  q_xyzw_ = nullptr;
  return temp;
}
inline ::Segway_proto::Quaternion_d* Pose3Dd::mutable_q_xyzw() {
  
  if (q_xyzw_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Quaternion_d>(GetArenaNoVirtual());
    q_xyzw_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.Pose3Dd.q_xyzw)
  return q_xyzw_;
}
inline void Pose3Dd::set_allocated_q_xyzw(::Segway_proto::Quaternion_d* q_xyzw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete q_xyzw_;
  }
  if (q_xyzw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      q_xyzw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q_xyzw, submessage_arena);
    }
    
  } else {
    
  }
  q_xyzw_ = q_xyzw;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.Pose3Dd.q_xyzw)
}

// -------------------------------------------------------------------

// Pose3Df

// .Segway_proto.Point3Df p_xyz = 1;
inline bool Pose3Df::has_p_xyz() const {
  return this != internal_default_instance() && p_xyz_ != nullptr;
}
inline void Pose3Df::clear_p_xyz() {
  if (GetArenaNoVirtual() == nullptr && p_xyz_ != nullptr) {
    delete p_xyz_;
  }
  p_xyz_ = nullptr;
}
inline const ::Segway_proto::Point3Df& Pose3Df::p_xyz() const {
  const ::Segway_proto::Point3Df* p = p_xyz_;
  // @@protoc_insertion_point(field_get:Segway_proto.Pose3Df.p_xyz)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Point3Df*>(
      &::Segway_proto::_Point3Df_default_instance_);
}
inline ::Segway_proto::Point3Df* Pose3Df::release_p_xyz() {
  // @@protoc_insertion_point(field_release:Segway_proto.Pose3Df.p_xyz)
  
  ::Segway_proto::Point3Df* temp = p_xyz_;
  p_xyz_ = nullptr;
  return temp;
}
inline ::Segway_proto::Point3Df* Pose3Df::mutable_p_xyz() {
  
  if (p_xyz_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Point3Df>(GetArenaNoVirtual());
    p_xyz_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.Pose3Df.p_xyz)
  return p_xyz_;
}
inline void Pose3Df::set_allocated_p_xyz(::Segway_proto::Point3Df* p_xyz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete p_xyz_;
  }
  if (p_xyz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p_xyz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p_xyz, submessage_arena);
    }
    
  } else {
    
  }
  p_xyz_ = p_xyz;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.Pose3Df.p_xyz)
}

// .Segway_proto.Quaternion_f q_xyzw = 2;
inline bool Pose3Df::has_q_xyzw() const {
  return this != internal_default_instance() && q_xyzw_ != nullptr;
}
inline void Pose3Df::clear_q_xyzw() {
  if (GetArenaNoVirtual() == nullptr && q_xyzw_ != nullptr) {
    delete q_xyzw_;
  }
  q_xyzw_ = nullptr;
}
inline const ::Segway_proto::Quaternion_f& Pose3Df::q_xyzw() const {
  const ::Segway_proto::Quaternion_f* p = q_xyzw_;
  // @@protoc_insertion_point(field_get:Segway_proto.Pose3Df.q_xyzw)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Quaternion_f*>(
      &::Segway_proto::_Quaternion_f_default_instance_);
}
inline ::Segway_proto::Quaternion_f* Pose3Df::release_q_xyzw() {
  // @@protoc_insertion_point(field_release:Segway_proto.Pose3Df.q_xyzw)
  
  ::Segway_proto::Quaternion_f* temp = q_xyzw_;
  q_xyzw_ = nullptr;
  return temp;
}
inline ::Segway_proto::Quaternion_f* Pose3Df::mutable_q_xyzw() {
  
  if (q_xyzw_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Quaternion_f>(GetArenaNoVirtual());
    q_xyzw_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.Pose3Df.q_xyzw)
  return q_xyzw_;
}
inline void Pose3Df::set_allocated_q_xyzw(::Segway_proto::Quaternion_f* q_xyzw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete q_xyzw_;
  }
  if (q_xyzw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      q_xyzw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q_xyzw, submessage_arena);
    }
    
  } else {
    
  }
  q_xyzw_ = q_xyzw;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.Pose3Df.q_xyzw)
}

// -------------------------------------------------------------------

// Pose2Dd

// .Segway_proto.Point2Dd p_xy = 1;
inline bool Pose2Dd::has_p_xy() const {
  return this != internal_default_instance() && p_xy_ != nullptr;
}
inline void Pose2Dd::clear_p_xy() {
  if (GetArenaNoVirtual() == nullptr && p_xy_ != nullptr) {
    delete p_xy_;
  }
  p_xy_ = nullptr;
}
inline const ::Segway_proto::Point2Dd& Pose2Dd::p_xy() const {
  const ::Segway_proto::Point2Dd* p = p_xy_;
  // @@protoc_insertion_point(field_get:Segway_proto.Pose2Dd.p_xy)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Point2Dd*>(
      &::Segway_proto::_Point2Dd_default_instance_);
}
inline ::Segway_proto::Point2Dd* Pose2Dd::release_p_xy() {
  // @@protoc_insertion_point(field_release:Segway_proto.Pose2Dd.p_xy)
  
  ::Segway_proto::Point2Dd* temp = p_xy_;
  p_xy_ = nullptr;
  return temp;
}
inline ::Segway_proto::Point2Dd* Pose2Dd::mutable_p_xy() {
  
  if (p_xy_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Point2Dd>(GetArenaNoVirtual());
    p_xy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.Pose2Dd.p_xy)
  return p_xy_;
}
inline void Pose2Dd::set_allocated_p_xy(::Segway_proto::Point2Dd* p_xy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete p_xy_;
  }
  if (p_xy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p_xy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p_xy, submessage_arena);
    }
    
  } else {
    
  }
  p_xy_ = p_xy;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.Pose2Dd.p_xy)
}

// double orientation = 2;
inline void Pose2Dd::clear_orientation() {
  orientation_ = 0;
}
inline double Pose2Dd::orientation() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Pose2Dd.orientation)
  return orientation_;
}
inline void Pose2Dd::set_orientation(double value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Pose2Dd.orientation)
}

// -------------------------------------------------------------------

// Pose2Df

// .Segway_proto.Point2Df p_xy = 1;
inline bool Pose2Df::has_p_xy() const {
  return this != internal_default_instance() && p_xy_ != nullptr;
}
inline void Pose2Df::clear_p_xy() {
  if (GetArenaNoVirtual() == nullptr && p_xy_ != nullptr) {
    delete p_xy_;
  }
  p_xy_ = nullptr;
}
inline const ::Segway_proto::Point2Df& Pose2Df::p_xy() const {
  const ::Segway_proto::Point2Df* p = p_xy_;
  // @@protoc_insertion_point(field_get:Segway_proto.Pose2Df.p_xy)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Point2Df*>(
      &::Segway_proto::_Point2Df_default_instance_);
}
inline ::Segway_proto::Point2Df* Pose2Df::release_p_xy() {
  // @@protoc_insertion_point(field_release:Segway_proto.Pose2Df.p_xy)
  
  ::Segway_proto::Point2Df* temp = p_xy_;
  p_xy_ = nullptr;
  return temp;
}
inline ::Segway_proto::Point2Df* Pose2Df::mutable_p_xy() {
  
  if (p_xy_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Point2Df>(GetArenaNoVirtual());
    p_xy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.Pose2Df.p_xy)
  return p_xy_;
}
inline void Pose2Df::set_allocated_p_xy(::Segway_proto::Point2Df* p_xy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete p_xy_;
  }
  if (p_xy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p_xy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p_xy, submessage_arena);
    }
    
  } else {
    
  }
  p_xy_ = p_xy;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.Pose2Df.p_xy)
}

// float orientation = 2;
inline void Pose2Df::clear_orientation() {
  orientation_ = 0;
}
inline float Pose2Df::orientation() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Pose2Df.orientation)
  return orientation_;
}
inline void Pose2Df::set_orientation(float value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Pose2Df.orientation)
}

// -------------------------------------------------------------------

// StampedPose3Dd

// .Segway_proto.Header header = 1;
inline bool StampedPose3Dd::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::Segway_proto::Header& StampedPose3Dd::header() const {
  const ::Segway_proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedPose3Dd.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Header*>(
      &::Segway_proto::_Header_default_instance_);
}
inline ::Segway_proto::Header* StampedPose3Dd::release_header() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedPose3Dd.header)
  
  ::Segway_proto::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Segway_proto::Header* StampedPose3Dd::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedPose3Dd.header)
  return header_;
}
inline void StampedPose3Dd::set_allocated_header(::Segway_proto::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedPose3Dd.header)
}

// .Segway_proto.Pose3Dd pose = 2;
inline bool StampedPose3Dd::has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline void StampedPose3Dd::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::Segway_proto::Pose3Dd& StampedPose3Dd::pose() const {
  const ::Segway_proto::Pose3Dd* p = pose_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedPose3Dd.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Pose3Dd*>(
      &::Segway_proto::_Pose3Dd_default_instance_);
}
inline ::Segway_proto::Pose3Dd* StampedPose3Dd::release_pose() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedPose3Dd.pose)
  
  ::Segway_proto::Pose3Dd* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::Segway_proto::Pose3Dd* StampedPose3Dd::mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Pose3Dd>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedPose3Dd.pose)
  return pose_;
}
inline void StampedPose3Dd::set_allocated_pose(::Segway_proto::Pose3Dd* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedPose3Dd.pose)
}

// -------------------------------------------------------------------

// StampedPose3Df

// .Segway_proto.Header header = 1;
inline bool StampedPose3Df::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::Segway_proto::Header& StampedPose3Df::header() const {
  const ::Segway_proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedPose3Df.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Header*>(
      &::Segway_proto::_Header_default_instance_);
}
inline ::Segway_proto::Header* StampedPose3Df::release_header() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedPose3Df.header)
  
  ::Segway_proto::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Segway_proto::Header* StampedPose3Df::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedPose3Df.header)
  return header_;
}
inline void StampedPose3Df::set_allocated_header(::Segway_proto::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedPose3Df.header)
}

// .Segway_proto.Pose3Df pose = 2;
inline bool StampedPose3Df::has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline void StampedPose3Df::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::Segway_proto::Pose3Df& StampedPose3Df::pose() const {
  const ::Segway_proto::Pose3Df* p = pose_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedPose3Df.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Pose3Df*>(
      &::Segway_proto::_Pose3Df_default_instance_);
}
inline ::Segway_proto::Pose3Df* StampedPose3Df::release_pose() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedPose3Df.pose)
  
  ::Segway_proto::Pose3Df* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::Segway_proto::Pose3Df* StampedPose3Df::mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Pose3Df>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedPose3Df.pose)
  return pose_;
}
inline void StampedPose3Df::set_allocated_pose(::Segway_proto::Pose3Df* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedPose3Df.pose)
}

// -------------------------------------------------------------------

// StampedPose2Dd

// .Segway_proto.Header header = 1;
inline bool StampedPose2Dd::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::Segway_proto::Header& StampedPose2Dd::header() const {
  const ::Segway_proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedPose2Dd.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Header*>(
      &::Segway_proto::_Header_default_instance_);
}
inline ::Segway_proto::Header* StampedPose2Dd::release_header() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedPose2Dd.header)
  
  ::Segway_proto::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Segway_proto::Header* StampedPose2Dd::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedPose2Dd.header)
  return header_;
}
inline void StampedPose2Dd::set_allocated_header(::Segway_proto::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedPose2Dd.header)
}

// .Segway_proto.Pose2Dd pose = 2;
inline bool StampedPose2Dd::has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline void StampedPose2Dd::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::Segway_proto::Pose2Dd& StampedPose2Dd::pose() const {
  const ::Segway_proto::Pose2Dd* p = pose_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedPose2Dd.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Pose2Dd*>(
      &::Segway_proto::_Pose2Dd_default_instance_);
}
inline ::Segway_proto::Pose2Dd* StampedPose2Dd::release_pose() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedPose2Dd.pose)
  
  ::Segway_proto::Pose2Dd* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::Segway_proto::Pose2Dd* StampedPose2Dd::mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Pose2Dd>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedPose2Dd.pose)
  return pose_;
}
inline void StampedPose2Dd::set_allocated_pose(::Segway_proto::Pose2Dd* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedPose2Dd.pose)
}

// -------------------------------------------------------------------

// StampedPose2Df

// .Segway_proto.Header header = 1;
inline bool StampedPose2Df::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::Segway_proto::Header& StampedPose2Df::header() const {
  const ::Segway_proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedPose2Df.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Header*>(
      &::Segway_proto::_Header_default_instance_);
}
inline ::Segway_proto::Header* StampedPose2Df::release_header() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedPose2Df.header)
  
  ::Segway_proto::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Segway_proto::Header* StampedPose2Df::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedPose2Df.header)
  return header_;
}
inline void StampedPose2Df::set_allocated_header(::Segway_proto::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedPose2Df.header)
}

// .Segway_proto.Pose2Df pose = 2;
inline bool StampedPose2Df::has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline void StampedPose2Df::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::Segway_proto::Pose2Df& StampedPose2Df::pose() const {
  const ::Segway_proto::Pose2Df* p = pose_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedPose2Df.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Pose2Df*>(
      &::Segway_proto::_Pose2Df_default_instance_);
}
inline ::Segway_proto::Pose2Df* StampedPose2Df::release_pose() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedPose2Df.pose)
  
  ::Segway_proto::Pose2Df* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::Segway_proto::Pose2Df* StampedPose2Df::mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Pose2Df>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedPose2Df.pose)
  return pose_;
}
inline void StampedPose2Df::set_allocated_pose(::Segway_proto::Pose2Df* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedPose2Df.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Segway_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2fpose_2eproto
