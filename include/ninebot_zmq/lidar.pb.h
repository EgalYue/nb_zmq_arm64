// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ninebot_zmq/lidar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2flidar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2flidar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ninebot_zmq/sensor_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ninebot_5fzmq_2flidar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ninebot_5fzmq_2flidar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ninebot_5fzmq_2flidar_2eproto;
namespace Segway_proto {
class LidarScan;
class LidarScanDefaultTypeInternal;
extern LidarScanDefaultTypeInternal _LidarScan_default_instance_;
class StampedLidarScan;
class StampedLidarScanDefaultTypeInternal;
extern StampedLidarScanDefaultTypeInternal _StampedLidarScan_default_instance_;
}  // namespace Segway_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Segway_proto::LidarScan* Arena::CreateMaybeMessage<::Segway_proto::LidarScan>(Arena*);
template<> ::Segway_proto::StampedLidarScan* Arena::CreateMaybeMessage<::Segway_proto::StampedLidarScan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Segway_proto {

// ===================================================================

class LidarScan :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.LidarScan) */ {
 public:
  LidarScan();
  virtual ~LidarScan();

  LidarScan(const LidarScan& from);
  LidarScan(LidarScan&& from) noexcept
    : LidarScan() {
    *this = ::std::move(from);
  }

  inline LidarScan& operator=(const LidarScan& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarScan& operator=(LidarScan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarScan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarScan* internal_default_instance() {
    return reinterpret_cast<const LidarScan*>(
               &_LidarScan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LidarScan* other);
  friend void swap(LidarScan& a, LidarScan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarScan* New() const final {
    return CreateMaybeMessage<LidarScan>(nullptr);
  }

  LidarScan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarScan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarScan& from);
  void MergeFrom(const LidarScan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarScan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.LidarScan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2flidar_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2flidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 size = 1;
  void clear_size();
  static const int kSizeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float angle_min = 2;
  void clear_angle_min();
  static const int kAngleMinFieldNumber = 2;
  float angle_min() const;
  void set_angle_min(float value);

  // float angle_max = 3;
  void clear_angle_max();
  static const int kAngleMaxFieldNumber = 3;
  float angle_max() const;
  void set_angle_max(float value);

  // float angle_increment = 4;
  void clear_angle_increment();
  static const int kAngleIncrementFieldNumber = 4;
  float angle_increment() const;
  void set_angle_increment(float value);

  // float time_increment = 5;
  void clear_time_increment();
  static const int kTimeIncrementFieldNumber = 5;
  float time_increment() const;
  void set_time_increment(float value);

  // float scan_time = 6;
  void clear_scan_time();
  static const int kScanTimeFieldNumber = 6;
  float scan_time() const;
  void set_scan_time(float value);

  // float range_min = 7;
  void clear_range_min();
  static const int kRangeMinFieldNumber = 7;
  float range_min() const;
  void set_range_min(float value);

  // float range_max = 8;
  void clear_range_max();
  static const int kRangeMaxFieldNumber = 8;
  float range_max() const;
  void set_range_max(float value);

  // @@protoc_insertion_point(class_scope:Segway_proto.LidarScan)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  float angle_min_;
  float angle_max_;
  float angle_increment_;
  float time_increment_;
  float scan_time_;
  float range_min_;
  float range_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2flidar_2eproto;
};
// -------------------------------------------------------------------

class StampedLidarScan :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.StampedLidarScan) */ {
 public:
  StampedLidarScan();
  virtual ~StampedLidarScan();

  StampedLidarScan(const StampedLidarScan& from);
  StampedLidarScan(StampedLidarScan&& from) noexcept
    : StampedLidarScan() {
    *this = ::std::move(from);
  }

  inline StampedLidarScan& operator=(const StampedLidarScan& from) {
    CopyFrom(from);
    return *this;
  }
  inline StampedLidarScan& operator=(StampedLidarScan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StampedLidarScan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StampedLidarScan* internal_default_instance() {
    return reinterpret_cast<const StampedLidarScan*>(
               &_StampedLidarScan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StampedLidarScan* other);
  friend void swap(StampedLidarScan& a, StampedLidarScan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StampedLidarScan* New() const final {
    return CreateMaybeMessage<StampedLidarScan>(nullptr);
  }

  StampedLidarScan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StampedLidarScan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StampedLidarScan& from);
  void MergeFrom(const StampedLidarScan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StampedLidarScan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.StampedLidarScan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2flidar_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2flidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Segway_proto::Header& header() const;
  ::Segway_proto::Header* release_header();
  ::Segway_proto::Header* mutable_header();
  void set_allocated_header(::Segway_proto::Header* header);

  // .Segway_proto.LidarScan scan = 2;
  bool has_scan() const;
  void clear_scan();
  static const int kScanFieldNumber = 2;
  const ::Segway_proto::LidarScan& scan() const;
  ::Segway_proto::LidarScan* release_scan();
  ::Segway_proto::LidarScan* mutable_scan();
  void set_allocated_scan(::Segway_proto::LidarScan* scan);

  // @@protoc_insertion_point(class_scope:Segway_proto.StampedLidarScan)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Header* header_;
  ::Segway_proto::LidarScan* scan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2flidar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LidarScan

// uint32 size = 1;
inline void LidarScan::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LidarScan::size() const {
  // @@protoc_insertion_point(field_get:Segway_proto.LidarScan.size)
  return size_;
}
inline void LidarScan::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.LidarScan.size)
}

// float angle_min = 2;
inline void LidarScan::clear_angle_min() {
  angle_min_ = 0;
}
inline float LidarScan::angle_min() const {
  // @@protoc_insertion_point(field_get:Segway_proto.LidarScan.angle_min)
  return angle_min_;
}
inline void LidarScan::set_angle_min(float value) {
  
  angle_min_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.LidarScan.angle_min)
}

// float angle_max = 3;
inline void LidarScan::clear_angle_max() {
  angle_max_ = 0;
}
inline float LidarScan::angle_max() const {
  // @@protoc_insertion_point(field_get:Segway_proto.LidarScan.angle_max)
  return angle_max_;
}
inline void LidarScan::set_angle_max(float value) {
  
  angle_max_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.LidarScan.angle_max)
}

// float angle_increment = 4;
inline void LidarScan::clear_angle_increment() {
  angle_increment_ = 0;
}
inline float LidarScan::angle_increment() const {
  // @@protoc_insertion_point(field_get:Segway_proto.LidarScan.angle_increment)
  return angle_increment_;
}
inline void LidarScan::set_angle_increment(float value) {
  
  angle_increment_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.LidarScan.angle_increment)
}

// float time_increment = 5;
inline void LidarScan::clear_time_increment() {
  time_increment_ = 0;
}
inline float LidarScan::time_increment() const {
  // @@protoc_insertion_point(field_get:Segway_proto.LidarScan.time_increment)
  return time_increment_;
}
inline void LidarScan::set_time_increment(float value) {
  
  time_increment_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.LidarScan.time_increment)
}

// float scan_time = 6;
inline void LidarScan::clear_scan_time() {
  scan_time_ = 0;
}
inline float LidarScan::scan_time() const {
  // @@protoc_insertion_point(field_get:Segway_proto.LidarScan.scan_time)
  return scan_time_;
}
inline void LidarScan::set_scan_time(float value) {
  
  scan_time_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.LidarScan.scan_time)
}

// float range_min = 7;
inline void LidarScan::clear_range_min() {
  range_min_ = 0;
}
inline float LidarScan::range_min() const {
  // @@protoc_insertion_point(field_get:Segway_proto.LidarScan.range_min)
  return range_min_;
}
inline void LidarScan::set_range_min(float value) {
  
  range_min_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.LidarScan.range_min)
}

// float range_max = 8;
inline void LidarScan::clear_range_max() {
  range_max_ = 0;
}
inline float LidarScan::range_max() const {
  // @@protoc_insertion_point(field_get:Segway_proto.LidarScan.range_max)
  return range_max_;
}
inline void LidarScan::set_range_max(float value) {
  
  range_max_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.LidarScan.range_max)
}

// -------------------------------------------------------------------

// StampedLidarScan

// .Segway_proto.Header header = 1;
inline bool StampedLidarScan::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::Segway_proto::Header& StampedLidarScan::header() const {
  const ::Segway_proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedLidarScan.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Header*>(
      &::Segway_proto::_Header_default_instance_);
}
inline ::Segway_proto::Header* StampedLidarScan::release_header() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedLidarScan.header)
  
  ::Segway_proto::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Segway_proto::Header* StampedLidarScan::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedLidarScan.header)
  return header_;
}
inline void StampedLidarScan::set_allocated_header(::Segway_proto::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedLidarScan.header)
}

// .Segway_proto.LidarScan scan = 2;
inline bool StampedLidarScan::has_scan() const {
  return this != internal_default_instance() && scan_ != nullptr;
}
inline void StampedLidarScan::clear_scan() {
  if (GetArenaNoVirtual() == nullptr && scan_ != nullptr) {
    delete scan_;
  }
  scan_ = nullptr;
}
inline const ::Segway_proto::LidarScan& StampedLidarScan::scan() const {
  const ::Segway_proto::LidarScan* p = scan_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedLidarScan.scan)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::LidarScan*>(
      &::Segway_proto::_LidarScan_default_instance_);
}
inline ::Segway_proto::LidarScan* StampedLidarScan::release_scan() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedLidarScan.scan)
  
  ::Segway_proto::LidarScan* temp = scan_;
  scan_ = nullptr;
  return temp;
}
inline ::Segway_proto::LidarScan* StampedLidarScan::mutable_scan() {
  
  if (scan_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::LidarScan>(GetArenaNoVirtual());
    scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedLidarScan.scan)
  return scan_;
}
inline void StampedLidarScan::set_allocated_scan(::Segway_proto::LidarScan* scan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scan_;
  }
  if (scan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan, submessage_arena);
    }
    
  } else {
    
  }
  scan_ = scan;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedLidarScan.scan)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Segway_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2flidar_2eproto
