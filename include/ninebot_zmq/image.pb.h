// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ninebot_zmq/image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2fimage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2fimage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ninebot_zmq/sensor_common.pb.h"
#include "ninebot_zmq/pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ninebot_5fzmq_2fimage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ninebot_5fzmq_2fimage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ninebot_5fzmq_2fimage_2eproto;
namespace Segway_proto {
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ImageWithPose;
class ImageWithPoseDefaultTypeInternal;
extern ImageWithPoseDefaultTypeInternal _ImageWithPose_default_instance_;
class StampedImage;
class StampedImageDefaultTypeInternal;
extern StampedImageDefaultTypeInternal _StampedImage_default_instance_;
class StampedImageWithPose;
class StampedImageWithPoseDefaultTypeInternal;
extern StampedImageWithPoseDefaultTypeInternal _StampedImageWithPose_default_instance_;
}  // namespace Segway_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Segway_proto::Image* Arena::CreateMaybeMessage<::Segway_proto::Image>(Arena*);
template<> ::Segway_proto::ImageWithPose* Arena::CreateMaybeMessage<::Segway_proto::ImageWithPose>(Arena*);
template<> ::Segway_proto::StampedImage* Arena::CreateMaybeMessage<::Segway_proto::StampedImage>(Arena*);
template<> ::Segway_proto::StampedImageWithPose* Arena::CreateMaybeMessage<::Segway_proto::StampedImageWithPose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Segway_proto {

// ===================================================================

class Image :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.Image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fimage_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fimage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string encoding = 3;
  void clear_encoding();
  static const int kEncodingFieldNumber = 3;
  const std::string& encoding() const;
  void set_encoding(const std::string& value);
  void set_encoding(std::string&& value);
  void set_encoding(const char* value);
  void set_encoding(const char* value, size_t size);
  std::string* mutable_encoding();
  std::string* release_encoding();
  void set_allocated_encoding(std::string* encoding);

  // uint32 height = 1;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 is_bigendian = 4;
  void clear_is_bigendian();
  static const int kIsBigendianFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_bigendian() const;
  void set_is_bigendian(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 step = 5;
  void clear_step();
  static const int kStepFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Segway_proto.Image)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_bigendian_;
  ::PROTOBUF_NAMESPACE_ID::uint32 step_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fimage_2eproto;
};
// -------------------------------------------------------------------

class ImageWithPose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.ImageWithPose) */ {
 public:
  ImageWithPose();
  virtual ~ImageWithPose();

  ImageWithPose(const ImageWithPose& from);
  ImageWithPose(ImageWithPose&& from) noexcept
    : ImageWithPose() {
    *this = ::std::move(from);
  }

  inline ImageWithPose& operator=(const ImageWithPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageWithPose& operator=(ImageWithPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageWithPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageWithPose* internal_default_instance() {
    return reinterpret_cast<const ImageWithPose*>(
               &_ImageWithPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ImageWithPose* other);
  friend void swap(ImageWithPose& a, ImageWithPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageWithPose* New() const final {
    return CreateMaybeMessage<ImageWithPose>(nullptr);
  }

  ImageWithPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageWithPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageWithPose& from);
  void MergeFrom(const ImageWithPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageWithPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.ImageWithPose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fimage_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fimage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Pose3Dd pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  const ::Segway_proto::Pose3Dd& pose() const;
  ::Segway_proto::Pose3Dd* release_pose();
  ::Segway_proto::Pose3Dd* mutable_pose();
  void set_allocated_pose(::Segway_proto::Pose3Dd* pose);

  // .Segway_proto.Image image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::Segway_proto::Image& image() const;
  ::Segway_proto::Image* release_image();
  ::Segway_proto::Image* mutable_image();
  void set_allocated_image(::Segway_proto::Image* image);

  // @@protoc_insertion_point(class_scope:Segway_proto.ImageWithPose)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Pose3Dd* pose_;
  ::Segway_proto::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fimage_2eproto;
};
// -------------------------------------------------------------------

class StampedImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.StampedImage) */ {
 public:
  StampedImage();
  virtual ~StampedImage();

  StampedImage(const StampedImage& from);
  StampedImage(StampedImage&& from) noexcept
    : StampedImage() {
    *this = ::std::move(from);
  }

  inline StampedImage& operator=(const StampedImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StampedImage& operator=(StampedImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StampedImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StampedImage* internal_default_instance() {
    return reinterpret_cast<const StampedImage*>(
               &_StampedImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StampedImage* other);
  friend void swap(StampedImage& a, StampedImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StampedImage* New() const final {
    return CreateMaybeMessage<StampedImage>(nullptr);
  }

  StampedImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StampedImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StampedImage& from);
  void MergeFrom(const StampedImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StampedImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.StampedImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fimage_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fimage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Segway_proto::Header& header() const;
  ::Segway_proto::Header* release_header();
  ::Segway_proto::Header* mutable_header();
  void set_allocated_header(::Segway_proto::Header* header);

  // .Segway_proto.Image image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::Segway_proto::Image& image() const;
  ::Segway_proto::Image* release_image();
  ::Segway_proto::Image* mutable_image();
  void set_allocated_image(::Segway_proto::Image* image);

  // @@protoc_insertion_point(class_scope:Segway_proto.StampedImage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Header* header_;
  ::Segway_proto::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fimage_2eproto;
};
// -------------------------------------------------------------------

class StampedImageWithPose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.StampedImageWithPose) */ {
 public:
  StampedImageWithPose();
  virtual ~StampedImageWithPose();

  StampedImageWithPose(const StampedImageWithPose& from);
  StampedImageWithPose(StampedImageWithPose&& from) noexcept
    : StampedImageWithPose() {
    *this = ::std::move(from);
  }

  inline StampedImageWithPose& operator=(const StampedImageWithPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline StampedImageWithPose& operator=(StampedImageWithPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StampedImageWithPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StampedImageWithPose* internal_default_instance() {
    return reinterpret_cast<const StampedImageWithPose*>(
               &_StampedImageWithPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StampedImageWithPose* other);
  friend void swap(StampedImageWithPose& a, StampedImageWithPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StampedImageWithPose* New() const final {
    return CreateMaybeMessage<StampedImageWithPose>(nullptr);
  }

  StampedImageWithPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StampedImageWithPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StampedImageWithPose& from);
  void MergeFrom(const StampedImageWithPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StampedImageWithPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.StampedImageWithPose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fimage_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fimage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Segway_proto::Header& header() const;
  ::Segway_proto::Header* release_header();
  ::Segway_proto::Header* mutable_header();
  void set_allocated_header(::Segway_proto::Header* header);

  // .Segway_proto.Pose3Dd pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::Segway_proto::Pose3Dd& pose() const;
  ::Segway_proto::Pose3Dd* release_pose();
  ::Segway_proto::Pose3Dd* mutable_pose();
  void set_allocated_pose(::Segway_proto::Pose3Dd* pose);

  // .Segway_proto.Image image = 3;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const ::Segway_proto::Image& image() const;
  ::Segway_proto::Image* release_image();
  ::Segway_proto::Image* mutable_image();
  void set_allocated_image(::Segway_proto::Image* image);

  // @@protoc_insertion_point(class_scope:Segway_proto.StampedImageWithPose)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Header* header_;
  ::Segway_proto::Pose3Dd* pose_;
  ::Segway_proto::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fimage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// uint32 height = 1;
inline void Image::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Image.height)
  return height_;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Image.height)
}

// uint32 width = 2;
inline void Image::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Image.width)
  return width_;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Image.width)
}

// string encoding = 3;
inline void Image::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::encoding() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Image.encoding)
  return encoding_.GetNoArena();
}
inline void Image::set_encoding(const std::string& value) {
  
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Segway_proto.Image.encoding)
}
inline void Image::set_encoding(std::string&& value) {
  
  encoding_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Segway_proto.Image.encoding)
}
inline void Image::set_encoding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Segway_proto.Image.encoding)
}
inline void Image::set_encoding(const char* value, size_t size) {
  
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Segway_proto.Image.encoding)
}
inline std::string* Image::mutable_encoding() {
  
  // @@protoc_insertion_point(field_mutable:Segway_proto.Image.encoding)
  return encoding_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_encoding() {
  // @@protoc_insertion_point(field_release:Segway_proto.Image.encoding)
  
  return encoding_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_encoding(std::string* encoding) {
  if (encoding != nullptr) {
    
  } else {
    
  }
  encoding_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.Image.encoding)
}

// uint32 is_bigendian = 4;
inline void Image::clear_is_bigendian() {
  is_bigendian_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::is_bigendian() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Image.is_bigendian)
  return is_bigendian_;
}
inline void Image::set_is_bigendian(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  is_bigendian_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Image.is_bigendian)
}

// uint32 step = 5;
inline void Image::clear_step() {
  step_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::step() const {
  // @@protoc_insertion_point(field_get:Segway_proto.Image.step)
  return step_;
}
inline void Image::set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.Image.step)
}

// -------------------------------------------------------------------

// ImageWithPose

// .Segway_proto.Pose3Dd pose = 1;
inline bool ImageWithPose::has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline const ::Segway_proto::Pose3Dd& ImageWithPose::pose() const {
  const ::Segway_proto::Pose3Dd* p = pose_;
  // @@protoc_insertion_point(field_get:Segway_proto.ImageWithPose.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Pose3Dd*>(
      &::Segway_proto::_Pose3Dd_default_instance_);
}
inline ::Segway_proto::Pose3Dd* ImageWithPose::release_pose() {
  // @@protoc_insertion_point(field_release:Segway_proto.ImageWithPose.pose)
  
  ::Segway_proto::Pose3Dd* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::Segway_proto::Pose3Dd* ImageWithPose::mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Pose3Dd>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.ImageWithPose.pose)
  return pose_;
}
inline void ImageWithPose::set_allocated_pose(::Segway_proto::Pose3Dd* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.ImageWithPose.pose)
}

// .Segway_proto.Image image = 2;
inline bool ImageWithPose::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline void ImageWithPose::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::Segway_proto::Image& ImageWithPose::image() const {
  const ::Segway_proto::Image* p = image_;
  // @@protoc_insertion_point(field_get:Segway_proto.ImageWithPose.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Image*>(
      &::Segway_proto::_Image_default_instance_);
}
inline ::Segway_proto::Image* ImageWithPose::release_image() {
  // @@protoc_insertion_point(field_release:Segway_proto.ImageWithPose.image)
  
  ::Segway_proto::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::Segway_proto::Image* ImageWithPose::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.ImageWithPose.image)
  return image_;
}
inline void ImageWithPose::set_allocated_image(::Segway_proto::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.ImageWithPose.image)
}

// -------------------------------------------------------------------

// StampedImage

// .Segway_proto.Header header = 1;
inline bool StampedImage::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::Segway_proto::Header& StampedImage::header() const {
  const ::Segway_proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedImage.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Header*>(
      &::Segway_proto::_Header_default_instance_);
}
inline ::Segway_proto::Header* StampedImage::release_header() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedImage.header)
  
  ::Segway_proto::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Segway_proto::Header* StampedImage::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedImage.header)
  return header_;
}
inline void StampedImage::set_allocated_header(::Segway_proto::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedImage.header)
}

// .Segway_proto.Image image = 2;
inline bool StampedImage::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline void StampedImage::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::Segway_proto::Image& StampedImage::image() const {
  const ::Segway_proto::Image* p = image_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedImage.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Image*>(
      &::Segway_proto::_Image_default_instance_);
}
inline ::Segway_proto::Image* StampedImage::release_image() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedImage.image)
  
  ::Segway_proto::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::Segway_proto::Image* StampedImage::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedImage.image)
  return image_;
}
inline void StampedImage::set_allocated_image(::Segway_proto::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedImage.image)
}

// -------------------------------------------------------------------

// StampedImageWithPose

// .Segway_proto.Header header = 1;
inline bool StampedImageWithPose::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::Segway_proto::Header& StampedImageWithPose::header() const {
  const ::Segway_proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedImageWithPose.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Header*>(
      &::Segway_proto::_Header_default_instance_);
}
inline ::Segway_proto::Header* StampedImageWithPose::release_header() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedImageWithPose.header)
  
  ::Segway_proto::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Segway_proto::Header* StampedImageWithPose::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedImageWithPose.header)
  return header_;
}
inline void StampedImageWithPose::set_allocated_header(::Segway_proto::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedImageWithPose.header)
}

// .Segway_proto.Pose3Dd pose = 2;
inline bool StampedImageWithPose::has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline const ::Segway_proto::Pose3Dd& StampedImageWithPose::pose() const {
  const ::Segway_proto::Pose3Dd* p = pose_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedImageWithPose.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Pose3Dd*>(
      &::Segway_proto::_Pose3Dd_default_instance_);
}
inline ::Segway_proto::Pose3Dd* StampedImageWithPose::release_pose() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedImageWithPose.pose)
  
  ::Segway_proto::Pose3Dd* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::Segway_proto::Pose3Dd* StampedImageWithPose::mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Pose3Dd>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedImageWithPose.pose)
  return pose_;
}
inline void StampedImageWithPose::set_allocated_pose(::Segway_proto::Pose3Dd* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedImageWithPose.pose)
}

// .Segway_proto.Image image = 3;
inline bool StampedImageWithPose::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline void StampedImageWithPose::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::Segway_proto::Image& StampedImageWithPose::image() const {
  const ::Segway_proto::Image* p = image_;
  // @@protoc_insertion_point(field_get:Segway_proto.StampedImageWithPose.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Image*>(
      &::Segway_proto::_Image_default_instance_);
}
inline ::Segway_proto::Image* StampedImageWithPose::release_image() {
  // @@protoc_insertion_point(field_release:Segway_proto.StampedImageWithPose.image)
  
  ::Segway_proto::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::Segway_proto::Image* StampedImageWithPose::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.StampedImageWithPose.image)
  return image_;
}
inline void StampedImageWithPose::set_allocated_image(::Segway_proto::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.StampedImageWithPose.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Segway_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2fimage_2eproto
