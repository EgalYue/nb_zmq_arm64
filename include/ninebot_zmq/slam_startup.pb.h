// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ninebot_zmq/slam_startup.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2fslam_5fstartup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2fslam_5fstartup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ninebot_zmq/pose.pb.h"
#include "ninebot_zmq/camera.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ninebot_5fzmq_2fslam_5fstartup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ninebot_5fzmq_2fslam_5fstartup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ninebot_5fzmq_2fslam_5fstartup_2eproto;
namespace Segway_proto {
class SlamStartup;
class SlamStartupDefaultTypeInternal;
extern SlamStartupDefaultTypeInternal _SlamStartup_default_instance_;
}  // namespace Segway_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Segway_proto::SlamStartup* Arena::CreateMaybeMessage<::Segway_proto::SlamStartup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Segway_proto {

// ===================================================================

class SlamStartup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Segway_proto.SlamStartup) */ {
 public:
  SlamStartup();
  virtual ~SlamStartup();

  SlamStartup(const SlamStartup& from);
  SlamStartup(SlamStartup&& from) noexcept
    : SlamStartup() {
    *this = ::std::move(from);
  }

  inline SlamStartup& operator=(const SlamStartup& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlamStartup& operator=(SlamStartup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlamStartup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlamStartup* internal_default_instance() {
    return reinterpret_cast<const SlamStartup*>(
               &_SlamStartup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SlamStartup* other);
  friend void swap(SlamStartup& a, SlamStartup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlamStartup* New() const final {
    return CreateMaybeMessage<SlamStartup>(nullptr);
  }

  SlamStartup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlamStartup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlamStartup& from);
  void MergeFrom(const SlamStartup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlamStartup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Segway_proto.SlamStartup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ninebot_5fzmq_2fslam_5fstartup_2eproto);
    return ::descriptor_table_ninebot_5fzmq_2fslam_5fstartup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Segway_proto.Camera fisheye = 5;
  bool has_fisheye() const;
  void clear_fisheye();
  static const int kFisheyeFieldNumber = 5;
  const ::Segway_proto::Camera& fisheye() const;
  ::Segway_proto::Camera* release_fisheye();
  ::Segway_proto::Camera* mutable_fisheye();
  void set_allocated_fisheye(::Segway_proto::Camera* fisheye);

  // .Segway_proto.Pose3Dd T_V_I = 6;
  bool has_t_v_i() const;
  void clear_t_v_i();
  static const int kTVIFieldNumber = 6;
  const ::Segway_proto::Pose3Dd& t_v_i() const;
  ::Segway_proto::Pose3Dd* release_t_v_i();
  ::Segway_proto::Pose3Dd* mutable_t_v_i();
  void set_allocated_t_v_i(::Segway_proto::Pose3Dd* t_v_i);

  // .Segway_proto.Pose3Dd T_L_V = 7;
  bool has_t_l_v() const;
  void clear_t_l_v();
  static const int kTLVFieldNumber = 7;
  const ::Segway_proto::Pose3Dd& t_l_v() const;
  ::Segway_proto::Pose3Dd* release_t_l_v();
  ::Segway_proto::Pose3Dd* mutable_t_l_v();
  void set_allocated_t_l_v(::Segway_proto::Pose3Dd* t_l_v);

  // .Segway_proto.Pose3Dd fake_pose = 9;
  bool has_fake_pose() const;
  void clear_fake_pose();
  static const int kFakePoseFieldNumber = 9;
  const ::Segway_proto::Pose3Dd& fake_pose() const;
  ::Segway_proto::Pose3Dd* release_fake_pose();
  ::Segway_proto::Pose3Dd* mutable_fake_pose();
  void set_allocated_fake_pose(::Segway_proto::Pose3Dd* fake_pose);

  // bool use_fake_pose = 8;
  void clear_use_fake_pose();
  static const int kUseFakePoseFieldNumber = 8;
  bool use_fake_pose() const;
  void set_use_fake_pose(bool value);

  // @@protoc_insertion_point(class_scope:Segway_proto.SlamStartup)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Segway_proto::Camera* fisheye_;
  ::Segway_proto::Pose3Dd* t_v_i_;
  ::Segway_proto::Pose3Dd* t_l_v_;
  ::Segway_proto::Pose3Dd* fake_pose_;
  bool use_fake_pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ninebot_5fzmq_2fslam_5fstartup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SlamStartup

// .Segway_proto.Camera fisheye = 5;
inline bool SlamStartup::has_fisheye() const {
  return this != internal_default_instance() && fisheye_ != nullptr;
}
inline const ::Segway_proto::Camera& SlamStartup::fisheye() const {
  const ::Segway_proto::Camera* p = fisheye_;
  // @@protoc_insertion_point(field_get:Segway_proto.SlamStartup.fisheye)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Camera*>(
      &::Segway_proto::_Camera_default_instance_);
}
inline ::Segway_proto::Camera* SlamStartup::release_fisheye() {
  // @@protoc_insertion_point(field_release:Segway_proto.SlamStartup.fisheye)
  
  ::Segway_proto::Camera* temp = fisheye_;
  fisheye_ = nullptr;
  return temp;
}
inline ::Segway_proto::Camera* SlamStartup::mutable_fisheye() {
  
  if (fisheye_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Camera>(GetArenaNoVirtual());
    fisheye_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.SlamStartup.fisheye)
  return fisheye_;
}
inline void SlamStartup::set_allocated_fisheye(::Segway_proto::Camera* fisheye) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fisheye_);
  }
  if (fisheye) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fisheye = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fisheye, submessage_arena);
    }
    
  } else {
    
  }
  fisheye_ = fisheye;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.SlamStartup.fisheye)
}

// .Segway_proto.Pose3Dd T_V_I = 6;
inline bool SlamStartup::has_t_v_i() const {
  return this != internal_default_instance() && t_v_i_ != nullptr;
}
inline const ::Segway_proto::Pose3Dd& SlamStartup::t_v_i() const {
  const ::Segway_proto::Pose3Dd* p = t_v_i_;
  // @@protoc_insertion_point(field_get:Segway_proto.SlamStartup.T_V_I)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Pose3Dd*>(
      &::Segway_proto::_Pose3Dd_default_instance_);
}
inline ::Segway_proto::Pose3Dd* SlamStartup::release_t_v_i() {
  // @@protoc_insertion_point(field_release:Segway_proto.SlamStartup.T_V_I)
  
  ::Segway_proto::Pose3Dd* temp = t_v_i_;
  t_v_i_ = nullptr;
  return temp;
}
inline ::Segway_proto::Pose3Dd* SlamStartup::mutable_t_v_i() {
  
  if (t_v_i_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Pose3Dd>(GetArenaNoVirtual());
    t_v_i_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.SlamStartup.T_V_I)
  return t_v_i_;
}
inline void SlamStartup::set_allocated_t_v_i(::Segway_proto::Pose3Dd* t_v_i) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_v_i_);
  }
  if (t_v_i) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      t_v_i = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_v_i, submessage_arena);
    }
    
  } else {
    
  }
  t_v_i_ = t_v_i;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.SlamStartup.T_V_I)
}

// .Segway_proto.Pose3Dd T_L_V = 7;
inline bool SlamStartup::has_t_l_v() const {
  return this != internal_default_instance() && t_l_v_ != nullptr;
}
inline const ::Segway_proto::Pose3Dd& SlamStartup::t_l_v() const {
  const ::Segway_proto::Pose3Dd* p = t_l_v_;
  // @@protoc_insertion_point(field_get:Segway_proto.SlamStartup.T_L_V)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Pose3Dd*>(
      &::Segway_proto::_Pose3Dd_default_instance_);
}
inline ::Segway_proto::Pose3Dd* SlamStartup::release_t_l_v() {
  // @@protoc_insertion_point(field_release:Segway_proto.SlamStartup.T_L_V)
  
  ::Segway_proto::Pose3Dd* temp = t_l_v_;
  t_l_v_ = nullptr;
  return temp;
}
inline ::Segway_proto::Pose3Dd* SlamStartup::mutable_t_l_v() {
  
  if (t_l_v_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Pose3Dd>(GetArenaNoVirtual());
    t_l_v_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.SlamStartup.T_L_V)
  return t_l_v_;
}
inline void SlamStartup::set_allocated_t_l_v(::Segway_proto::Pose3Dd* t_l_v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_l_v_);
  }
  if (t_l_v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      t_l_v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_l_v, submessage_arena);
    }
    
  } else {
    
  }
  t_l_v_ = t_l_v;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.SlamStartup.T_L_V)
}

// bool use_fake_pose = 8;
inline void SlamStartup::clear_use_fake_pose() {
  use_fake_pose_ = false;
}
inline bool SlamStartup::use_fake_pose() const {
  // @@protoc_insertion_point(field_get:Segway_proto.SlamStartup.use_fake_pose)
  return use_fake_pose_;
}
inline void SlamStartup::set_use_fake_pose(bool value) {
  
  use_fake_pose_ = value;
  // @@protoc_insertion_point(field_set:Segway_proto.SlamStartup.use_fake_pose)
}

// .Segway_proto.Pose3Dd fake_pose = 9;
inline bool SlamStartup::has_fake_pose() const {
  return this != internal_default_instance() && fake_pose_ != nullptr;
}
inline const ::Segway_proto::Pose3Dd& SlamStartup::fake_pose() const {
  const ::Segway_proto::Pose3Dd* p = fake_pose_;
  // @@protoc_insertion_point(field_get:Segway_proto.SlamStartup.fake_pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::Segway_proto::Pose3Dd*>(
      &::Segway_proto::_Pose3Dd_default_instance_);
}
inline ::Segway_proto::Pose3Dd* SlamStartup::release_fake_pose() {
  // @@protoc_insertion_point(field_release:Segway_proto.SlamStartup.fake_pose)
  
  ::Segway_proto::Pose3Dd* temp = fake_pose_;
  fake_pose_ = nullptr;
  return temp;
}
inline ::Segway_proto::Pose3Dd* SlamStartup::mutable_fake_pose() {
  
  if (fake_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::Segway_proto::Pose3Dd>(GetArenaNoVirtual());
    fake_pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Segway_proto.SlamStartup.fake_pose)
  return fake_pose_;
}
inline void SlamStartup::set_allocated_fake_pose(::Segway_proto::Pose3Dd* fake_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fake_pose_);
  }
  if (fake_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fake_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fake_pose, submessage_arena);
    }
    
  } else {
    
  }
  fake_pose_ = fake_pose;
  // @@protoc_insertion_point(field_set_allocated:Segway_proto.SlamStartup.fake_pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Segway_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ninebot_5fzmq_2fslam_5fstartup_2eproto
